
<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Visualização da Câmera</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster/dist/MarkerCluster.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster/dist/MarkerCluster.Default.css" />
    <style>
        * {
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f0f2f5;
            color: #333;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: flex-start;
        }

        header {
            width: 100%;
            background: #4CAF50;
            padding: 20px;
            text-align: center;
            color: white;
            font-size: 1.5rem;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

        main {
            width: 100%;
            max-width: 720px;
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 20px;
        }

        .image-container {
            position: relative;
            width: 100%;
        }

        img {
            width: 100%;
            height: auto;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            transition: opacity 0.5s ease-in-out;
        }

        #camera-new {
            position: absolute;
            top: 0;
            left: 0;
            opacity: 0;
        }

        #status {
            font-size: 1rem;
            color: #555;
            margin-top: 10px;
        }

        #map {
            height: 300px;
            width: 100%;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        button {
            background-color: #4CAF50;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1rem;
            transition: background-color 0.3s ease;
        }

        button:hover {
            background-color: #45a049;
        }

        button:focus {
            outline: none;
        }

        @media (max-width: 768px) {
            main {
                padding: 10px;
            }
        }
    </style>
</head>
<body>
    <header>
        Visualização da Câmera
    </header>
    <main>
        <div class="image-container">
            <img id="camera" alt="Imagem da câmera">
            <img id="camera-new" alt="Imagem da câmera nova">
        </div>
        <h2>Localização da Câmera</h2>
        <div id="map"></div>
    </main>

    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script src="https://unpkg.com/leaflet.markercluster/dist/leaflet.markercluster.js"></script>
    <script>
        let codigos = [];
        let codigoIndex = 0;
        let atualizandoImagem = false;
        const intervaloAtualizacao = 1000;

        function obterCodigoDaURL() {
            const params = new URLSearchParams(window.location.search);
            return params.get('codigo');
        }

        async function atualizarImagem() {
    if (atualizandoImagem) return;
    atualizandoImagem = true;

    const img = document.getElementById('camera');
    const imgNew = document.getElementById('camera-new');
    const statusDiv = document.getElementById('status');

    if (codigos.length > 0) {
        const codigoAtual = codigos[codigoIndex];
        const imageUrl = `/proxy/camera?code=${codigoAtual}&rand=${Math.random()}`;

        try {
            const response = await fetch(imageUrl);
            if (!response.ok) {
                statusDiv.innerText = `Código: ${codigoAtual} - Imagem não encontrada.`;
                img.style.opacity = 0;
                codigoIndex = (codigoIndex + 1) % codigos.length;
                await delay(500);
                atualizarImagem();
                return;
            }

            const blob = await response.blob();
            imgNew.src = `${imageUrl}&_=${new Date().getTime()}`;
            imgNew.onload = function () {
                imgNew.style.opacity = 1;
                setTimeout(() => {
                    img.src = imgNew.src;
                    img.style.opacity = 1;
                    imgNew.style.opacity = 0;
                    atualizandoImagem = false;
                }, 500);
            };
        } catch (error) {
            console.error(`Erro ao verificar a imagem para o código ${codigoAtual}:`, error);
        }

        setTimeout(atualizarImagem, intervaloAtualizacao);
    }
}


        function buscarCodigos() {
            const codigoURL = obterCodigoDaURL();
            codigos = [codigoURL];
            if (codigos.length > 0) {
                atualizarImagem();
            }
        }

        async function carregarCoordenadas() {
            try {
                const response = await fetch('/camera.json');
                const coordenadasCameras = await response.json();
                inicializarMapa(coordenadasCameras);
            } catch (error) {
                console.error('Erro ao carregar coordenadas:', error);
            }
        }

        function inicializarMapa(coordenadasCameras) {
            const map = L.map('map').setView([-9.97499, -67.8243], 12);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; OpenStreetMap contributors'
            }).addTo(map);

            const markers = L.markerClusterGroup();
            Object.keys(coordenadasCameras).forEach(codigo => {
                const coordenadas = coordenadasCameras[codigo];
                const marker = L.marker([coordenadas.lat, coordenadas.lng]).bindPopup(
                    `<strong>Câmera ${codigo}</strong><br>${coordenadas.comentario}<br>
                    <button onclick="irParaCamera('${codigo}')">Visualizar</button>`
                );
                markers.addLayer(marker);
            });
            map.addLayer(markers);
        }

        function irParaCamera(codigo) {
            const newUrl = `?codigo=${codigo}`;
            window.history.pushState({ codigo }, '', newUrl);
            buscarCodigos();
        }

        function delay(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }

        carregarCoordenadas();
        buscarCodigos();
    </script>
</body>
</html>
